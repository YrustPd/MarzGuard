# MarzGuard configuration
#
# All settings below can be overridden by exporting the same environment
# variable before starting the monitor. Values shown here are safe defaults
# for most deployments. Lines beginning with '#' are comments.

### Detection ###############################################################
# Keywords used to discover Marzban containers by name, image, or labels.
MG_CONTAINER_FILTER_KEYWORDS="marzban"
# Additional hints to classify containers as application instances.
MG_APP_ROLE_KEYWORDS="marzban,app"
# Keywords that indicate a database role.
MG_DB_ROLE_KEYWORDS="db,database,postgres,postgresql,mysql,mariadb"

### Runtime #################################################################
# Force a specific container runtime (docker or podman). Leave empty to auto-detect.
MG_RUNTIME_BINARY=""
# Enable mock mode for testing without Docker. Set to 1 to force simulation.
MG_MOCK_MODE=0

### Sampling & Thresholds ###################################################
# Seconds between metric samples.
MG_SAMPLE_INTERVAL=0.5
# Number of samples kept per container in the sliding window.
MG_WINDOW_SIZE=5
# Minimum number of breaches within the window before actions trigger.
MG_MIN_BREACHES=3
# CPU utilization percentage that constitutes a breach (110 = 1.1 cores).
MG_CPU_LIMIT_PERCENT=110
# Memory usage percentage that constitutes a breach.
MG_MEM_LIMIT_PERCENT=85
# Seconds to wait after an automated action before acting on the same container again.
MG_COOLDOWN_SECONDS=300
# Seconds between full rediscovery of containers.
MG_DETECTION_INTERVAL=10

### Automated Actions #######################################################
# Apply CPU limits automatically when CPU breaches occur.
MG_AUTO_LIMIT_CPU=1
# CPU quota applied when automatic limiting runs (docker update --cpus <value>).
MG_CPU_LIMIT_CPUS=1.5
# Apply memory limits automatically when memory breaches occur.
MG_AUTO_LIMIT_MEM=0
# Memory limit applied during automatic limiting (empty disables). Accepts docker units (e.g., 1024m, 2g).
MG_MEM_LIMIT_BYTES=""
# Restart the affected container if limits are disabled or ineffective.
MG_AUTO_RESTART=1
# Restart the container runtime itself when breaches persist (use with caution).
MG_AUTO_RESTART_DOCKER=0
# Allow manual docker/podman restarts via CLI.
MG_ALLOW_DOCKER_RESTART=0

### Logging & Observability #################################################
# Primary log destination used by the monitor and CLI.
MG_LOG_FILE="/var/log/marzguard.log"
# Log level (DEBUG, INFO, WARN, ERROR).
MG_LOG_LEVEL="INFO"
# Mirror log lines to stdout in addition to the log file.
MG_LOG_TO_STDOUT=0
# Emit Prometheus-friendly metrics lines (0 disables).
MG_PROMETHEUS_OUTPUT=0
# Optional path to write Prometheus metrics when enabled.
MG_PROMETHEUS_PATH=""

### Additional Health Checks ################################################
# Inspect container health probes (docker healthcheck).
MG_ENABLE_HEALTH_CHECK=1
# Watch for increasing restart counts.
MG_ENABLE_RESTART_COUNT_CHECK=1
# Monitor disk usage for root and the Docker data directory.
MG_ENABLE_DISK_CHECK=1
# Disk saturation thresholds (percentage).
MG_DISK_THRESHOLD_ROOT=90
MG_DISK_THRESHOLD_DOCKER=90
# Override if Docker stores data somewhere other than /var/lib/docker.
MG_DOCKER_DATA_ROOT="/var/lib/docker"
# Poll the container runtime daemon for health.
MG_ENABLE_DAEMON_CHECK=1
# Check Marzban UI/API network reachability.
MG_ENABLE_NETWORK_CHECK=1
MG_NETWORK_CHECK_HOST="127.0.0.1"
MG_NETWORK_CHECK_PORT=8000

### Self-Test ###############################################################
# Duration (seconds) for the built-in self-test loop.
MG_SELF_TEST_DURATION=5

### Runtime Directories #####################################################
# Override only when custom file system layouts are required.
MG_RUNTIME_DIR="/var/lib/marzguard"
MG_STATE_DIR="/run/marzguard"

# End of configuration
